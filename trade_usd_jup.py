# -------- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ —Ç–æ—Ä–≥—É–µ–º—ã (Jupiter token list) --------
try:
    tokens = requests.get("https://token.jup.ag/all", timeout=TIMEOUT, headers=HEADERS)
    tokens.raise_for_status()
    token_list = tokens.json()
    tradable: set[str] = {t["address"] for t in token_list if t.get("trades") != 0 or t.get("extensions", {}).get("coingeckoId")}
    if from_mint not in tradable:
        sys.exit("‚ùå –í—Ö–æ–¥–Ω–æ–π —Ç–æ–∫–µ–Ω –Ω–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ç–æ—Ä–≥—É–µ–º—ã–π –≤ Jupiter token list")
    if to_mint not in tradable:
        sys.exit("‚ùå –í—ã—Ö–æ–¥–Ω–æ–π —Ç–æ–∫–µ–Ω –Ω–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ç–æ—Ä–≥—É–µ–º—ã–π –≤ Jupiter token list ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π mint")
except Exception as err:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å token list Jupiter ({err}). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Ä¶")

# -------- 3. –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç Jupiter -----------
quote_resp = requests.get(
    JUP_QUOTE_V6,
    params={
        "inputMint": from_mint,
        "outputMint": to_mint,
        "amount": atoms_in,
        "slippageBps": SLIPPAGE_BPS,
        "swapMode": "ExactIn",
    },
    timeout=TIMEOUT,
    headers=HEADERS,
)

try:
    quote_resp.raise_for_status()
except requests.HTTPError as e:
    sys.exit(f"‚ùå –û—à–∏–±–∫–∞ quote‚ÄëAPI: {e} ‚Üí {quote_resp.text[:300]}")

q_json = quote_resp.json()
# API v6 –æ—Ç–¥–∞—ë—Ç –ª–∏–±–æ {"data": [...]} –ª–∏–±–æ —Å—Ä–∞–∑—É [...]
routes = q_json.get("data") if isinstance(q_json, dict) else q_json

if not routes:
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—Ö–æ–¥–Ω—É—é —Å—É–º–º—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
    min_in_atoms: int | None = None
    if isinstance(q_json, dict):
        min_in_atoms = q_json.get("minInAmount") or q_json.get("minIn")
    if min_in_atoms and isinstance(min_in_atoms, int) and min_in_atoms > atoms_in:
        min_usd = min_in_atoms / 10**input_dec * price_usd
        sys.exit(
            f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã ‚âà {min_usd:.2f}¬†USD "
            f"(minInAmount¬†=¬†{min_in_atoms}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—É–º–º—É –∏–ª–∏ –¥—Ä—É–≥—É—é –ø–∞—Ä—É."
        )
    # –ï—Å–ª–∏ Jupiter –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –∏–ª–∏ –ø—É—Å—Ç–æ–π list ‚Äì –≤—ã–≤–æ–¥–∏–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print("üîç Quote API raw response (truncated):", json.dumps(q_json, indent=2)[:800])
    sys.exit("‚ùå Jupiter –Ω–µ –Ω–∞—à—ë–ª –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –±–æ–ª—å—à–µ USD –∏–ª–∏ –¥—Ä—É–≥—É—é –ø–∞—Ä—É.")

quote = routes[0]

# -------- 3. –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—É—é swap‚Äëtx ----------
try:
    swap_resp = requests.post(
        JUP_SWAP_V6,
        json={
            "quoteResponse": quote,
            "userPublicKey": str(owner.pubkey()),
            "wrapAndUnwrapSol": True,
        },
        timeout=TIMEOUT,
        headers=HEADERS,
    )
    swap_resp.raise_for_status()
except requests.HTTPError as e:
    sys.exit(f"‚ùå –û—à–∏–±–∫–∞ swap‚ÄëAPI: {e} ‚Üí {swap_resp.text[:300]}")

swap_json = swap_resp.json()
if "swapTransaction" not in swap_json:
    sys.exit("‚ùå Swap API –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ swapTransaction: " + json.dumps(swap_json)[:400])

swap_b64 = swap_json["swapTransaction"]
trx = VersionedTransaction.from_bytes(base64.b64decode(swap_b64))
trx.sign([owner])

# -------- 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É --------
try:
    sig = rpc_send_raw(trx.serialize())
except Exception as e:
    sys.exit(f"‚ùå RPC sendTransaction failed: {e}")

print("‚úÖ Sent tx: https://explorer.solana.com/tx/" + sig)
